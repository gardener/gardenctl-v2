// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardenctl-v2/pkg/cmd/base (interfaces: CommandOptions)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cobra "github.com/spf13/cobra"
	pflag "github.com/spf13/pflag"

	util "github.com/gardener/gardenctl-v2/internal/util"
)

// MockCommandOptions is a mock of CommandOptions interface.
type MockCommandOptions struct {
	ctrl     *gomock.Controller
	recorder *MockCommandOptionsMockRecorder
}

// MockCommandOptionsMockRecorder is the mock recorder for MockCommandOptions.
type MockCommandOptionsMockRecorder struct {
	mock *MockCommandOptions
}

// NewMockCommandOptions creates a new mock instance.
func NewMockCommandOptions(ctrl *gomock.Controller) *MockCommandOptions {
	mock := &MockCommandOptions{ctrl: ctrl}
	mock.recorder = &MockCommandOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandOptions) EXPECT() *MockCommandOptionsMockRecorder {
	return m.recorder
}

// AddFlags mocks base method.
func (m *MockCommandOptions) AddFlags(arg0 *pflag.FlagSet) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFlags", arg0)
}

// AddFlags indicates an expected call of AddFlags.
func (mr *MockCommandOptionsMockRecorder) AddFlags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlags", reflect.TypeOf((*MockCommandOptions)(nil).AddFlags), arg0)
}

// Complete mocks base method.
func (m *MockCommandOptions) Complete(arg0 util.Factory, arg1 *cobra.Command, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Complete indicates an expected call of Complete.
func (mr *MockCommandOptionsMockRecorder) Complete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockCommandOptions)(nil).Complete), arg0, arg1, arg2)
}

// Run mocks base method.
func (m *MockCommandOptions) Run(arg0 util.Factory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockCommandOptionsMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCommandOptions)(nil).Run), arg0)
}

// Validate mocks base method.
func (m *MockCommandOptions) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockCommandOptionsMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockCommandOptions)(nil).Validate))
}
