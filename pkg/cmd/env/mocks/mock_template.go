// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardenctl-v2/pkg/cmd/env (interfaces: Template)

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTemplate is a mock of Template interface.
type MockTemplate struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateMockRecorder
}

// MockTemplateMockRecorder is the mock recorder for MockTemplate.
type MockTemplateMockRecorder struct {
	mock *MockTemplate
}

// NewMockTemplate creates a new mock instance.
func NewMockTemplate(ctrl *gomock.Controller) *MockTemplate {
	mock := &MockTemplate{ctrl: ctrl}
	mock.recorder = &MockTemplateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplate) EXPECT() *MockTemplateMockRecorder {
	return m.recorder
}

// ExecuteTemplate mocks base method.
func (m *MockTemplate) ExecuteTemplate(arg0 io.Writer, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTemplate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteTemplate indicates an expected call of ExecuteTemplate.
func (mr *MockTemplateMockRecorder) ExecuteTemplate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTemplate", reflect.TypeOf((*MockTemplate)(nil).ExecuteTemplate), arg0, arg1, arg2)
}

// ParseFiles mocks base method.
func (m *MockTemplate) ParseFiles(arg0 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ParseFiles", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseFiles indicates an expected call of ParseFiles.
func (mr *MockTemplateMockRecorder) ParseFiles(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseFiles", reflect.TypeOf((*MockTemplate)(nil).ParseFiles), arg0...)
}
