// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardenctl-v2/pkg/target (interfaces: TargetProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	target "github.com/gardener/gardenctl-v2/pkg/target"
	gomock "github.com/golang/mock/gomock"
)

// MockTargetProvider is a mock of TargetProvider interface.
type MockTargetProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTargetProviderMockRecorder
}

// MockTargetProviderMockRecorder is the mock recorder for MockTargetProvider.
type MockTargetProviderMockRecorder struct {
	mock *MockTargetProvider
}

// NewMockTargetProvider creates a new mock instance.
func NewMockTargetProvider(ctrl *gomock.Controller) *MockTargetProvider {
	mock := &MockTargetProvider{ctrl: ctrl}
	mock.recorder = &MockTargetProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetProvider) EXPECT() *MockTargetProviderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockTargetProvider) Read() (target.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(target.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTargetProviderMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTargetProvider)(nil).Read))
}

// Write mocks base method.
func (m *MockTargetProvider) Write(arg0 target.Target) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockTargetProviderMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockTargetProvider)(nil).Write), arg0)
}
