// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardenctl-v2/internal/util (interfaces: Factory)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	util "github.com/gardener/gardenctl-v2/internal/util"
	target "github.com/gardener/gardenctl-v2/pkg/target"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// Clock mocks base method.
func (m *MockFactory) Clock() util.Clock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clock")
	ret0, _ := ret[0].(util.Clock)
	return ret0
}

// Clock indicates an expected call of Clock.
func (mr *MockFactoryMockRecorder) Clock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clock", reflect.TypeOf((*MockFactory)(nil).Clock))
}

// Context mocks base method.
func (m *MockFactory) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFactoryMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFactory)(nil).Context))
}

// GardenHomeDir mocks base method.
func (m *MockFactory) GardenHomeDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GardenHomeDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// GardenHomeDir indicates an expected call of GardenHomeDir.
func (mr *MockFactoryMockRecorder) GardenHomeDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GardenHomeDir", reflect.TypeOf((*MockFactory)(nil).GardenHomeDir))
}

// Manager mocks base method.
func (m *MockFactory) Manager() (target.Manager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Manager")
	ret0, _ := ret[0].(target.Manager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Manager indicates an expected call of Manager.
func (mr *MockFactoryMockRecorder) Manager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Manager", reflect.TypeOf((*MockFactory)(nil).Manager))
}

// PublicIPs mocks base method.
func (m *MockFactory) PublicIPs(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicIPs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicIPs indicates an expected call of PublicIPs.
func (mr *MockFactoryMockRecorder) PublicIPs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicIPs", reflect.TypeOf((*MockFactory)(nil).PublicIPs), arg0)
}
