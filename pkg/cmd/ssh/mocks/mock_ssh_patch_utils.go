// Code generated by MockGen. DO NOT EDIT.
// Source: ./ssh_patch_utils.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	api "k8s.io/client-go/tools/clientcmd/api"
	gardenclient "github.com/gardener/gardenctl-v2/internal/gardenclient"
)

// MocksshPatchUtils is a mock of sshPatchUtils interface.
type MocksshPatchUtils struct {
	ctrl     *gomock.Controller
	recorder *MocksshPatchUtilsMockRecorder
}

// MocksshPatchUtilsMockRecorder is the mock recorder for MocksshPatchUtils.
type MocksshPatchUtilsMockRecorder struct {
	mock *MocksshPatchUtils
}

// NewMocksshPatchUtils creates a new mock instance.
func NewMocksshPatchUtils(ctrl *gomock.Controller) *MocksshPatchUtils {
	mock := &MocksshPatchUtils{ctrl: ctrl}
	mock.recorder = &MocksshPatchUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksshPatchUtils) EXPECT() *MocksshPatchUtilsMockRecorder {
	return m.recorder
}

// GetCurrentUser mocks base method.
func (m *MocksshPatchUtils) GetCurrentUser(ctx context.Context, gardenClient gardenclient.Client, authInfo *api.AuthInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUser", ctx, gardenClient, authInfo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentUser indicates an expected call of GetCurrentUser.
func (mr *MocksshPatchUtilsMockRecorder) GetCurrentUser(ctx, gardenClient, authInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUser", reflect.TypeOf((*MocksshPatchUtils)(nil).GetCurrentUser), ctx, gardenClient, authInfo)
}
