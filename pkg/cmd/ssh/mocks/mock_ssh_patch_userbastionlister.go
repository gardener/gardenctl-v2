// Code generated by MockGen. DO NOT EDIT.
// Source: ./ssh_patch_userbastionlister.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/gardener/gardener/pkg/apis/operations/v1alpha1"
	gomock "github.com/golang/mock/gomock"
)

// MockbastionLister is a mock of bastionLister interface.
type MockbastionLister struct {
	ctrl     *gomock.Controller
	recorder *MockbastionListerMockRecorder
}

// MockbastionListerMockRecorder is the mock recorder for MockbastionLister.
type MockbastionListerMockRecorder struct {
	mock *MockbastionLister
}

// NewMockbastionLister creates a new mock instance.
func NewMockbastionLister(ctrl *gomock.Controller) *MockbastionLister {
	mock := &MockbastionLister{ctrl: ctrl}
	mock.recorder = &MockbastionListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbastionLister) EXPECT() *MockbastionListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockbastionLister) List(ctx context.Context) ([]v1alpha1.Bastion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]v1alpha1.Bastion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockbastionListerMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockbastionLister)(nil).List), ctx)
}

// MockbastionPatcher is a mock of bastionPatcher interface.
type MockbastionPatcher struct {
	ctrl     *gomock.Controller
	recorder *MockbastionPatcherMockRecorder
}

// MockbastionPatcherMockRecorder is the mock recorder for MockbastionPatcher.
type MockbastionPatcherMockRecorder struct {
	mock *MockbastionPatcher
}

// NewMockbastionPatcher creates a new mock instance.
func NewMockbastionPatcher(ctrl *gomock.Controller) *MockbastionPatcher {
	mock := &MockbastionPatcher{ctrl: ctrl}
	mock.recorder = &MockbastionPatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbastionPatcher) EXPECT() *MockbastionPatcherMockRecorder {
	return m.recorder
}

// Patch mocks base method.
func (m *MockbastionPatcher) Patch(ctx context.Context, oldBastion, newBastion *v1alpha1.Bastion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, oldBastion, newBastion)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockbastionPatcherMockRecorder) Patch(ctx, oldBastion, newBastion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockbastionPatcher)(nil).Patch), ctx, oldBastion, newBastion)
}

// MockbastionListPatcher is a mock of bastionListPatcher interface.
type MockbastionListPatcher struct {
	ctrl     *gomock.Controller
	recorder *MockbastionListPatcherMockRecorder
}

// MockbastionListPatcherMockRecorder is the mock recorder for MockbastionListPatcher.
type MockbastionListPatcherMockRecorder struct {
	mock *MockbastionListPatcher
}

// NewMockbastionListPatcher creates a new mock instance.
func NewMockbastionListPatcher(ctrl *gomock.Controller) *MockbastionListPatcher {
	mock := &MockbastionListPatcher{ctrl: ctrl}
	mock.recorder = &MockbastionListPatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbastionListPatcher) EXPECT() *MockbastionListPatcherMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockbastionListPatcher) List(ctx context.Context) ([]v1alpha1.Bastion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]v1alpha1.Bastion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockbastionListPatcherMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockbastionListPatcher)(nil).List), ctx)
}

// Patch mocks base method.
func (m *MockbastionListPatcher) Patch(ctx context.Context, oldBastion, newBastion *v1alpha1.Bastion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, oldBastion, newBastion)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockbastionListPatcherMockRecorder) Patch(ctx, oldBastion, newBastion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockbastionListPatcher)(nil).Patch), ctx, oldBastion, newBastion)
}
