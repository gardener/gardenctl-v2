{{define "bash" -}}
if [ -z "$GCTL_SESSION_ID" ] && [ -z "$TERM_SESSION_ID" ]; then
  export GCTL_SESSION_ID=$(uuidgen)
fi
{{if not .noCompletion -}}
source <(gardenctl completion {{.shell}})
alias {{.prefix}}=gardenctl
complete -o default -F __start_gardenctl {{.prefix}}
{{end -}}
alias {{.prefix}}tv='gardenctl target view -o yaml'
alias {{.prefix}}tc='gardenctl target control-plane'
alias {{.prefix}}tc-='gardenctl target unset control-plane'
alias {{.prefix}}k='eval $(gardenctl kubectl-env {{.shell}})'
alias {{.prefix}}p='eval $(gardenctl provider-env {{.shell}})'
alias {{.prefix}}cv='gardenctl config view -o yaml'
{{end}}

{{define "zsh" -}}
if [ -z "$GCTL_SESSION_ID" ] && [ -z "$TERM_SESSION_ID" ]; then
  export GCTL_SESSION_ID=$(uuidgen)
fi
{{if not .noCompletion -}}
if (( $+commands[gardenctl] )); then
  if [ -d "$ZSH_CACHE_DIR/completions" ] && (($fpath[(Ie)$ZSH_CACHE_DIR/completions])); then
    GCTL_COMPLETION_FILE="$ZSH_CACHE_DIR/completions/_gardenctl"
  else
    GCTL_COMPLETION_FILE="${fpath[1]}/_gardenctl"
  fi
  if [[ ! -f "$GCTL_COMPLETION_FILE" ]]; then
    typeset -g -A _comps
    autoload -Uz _gardenctl
    _comps[gardenctl]=_gardenctl
  fi
  gardenctl completion zsh >| "$GCTL_COMPLETION_FILE" &|
  unset GCTL_COMPLETION_FILE
fi
{{end -}}
alias {{.prefix}}=gardenctl
alias {{.prefix}}tv='gardenctl target view -o yaml'
alias {{.prefix}}tc='gardenctl target control-plane'
alias {{.prefix}}tc-='gardenctl target unset control-plane'
alias {{.prefix}}k='eval $(gardenctl kubectl-env {{.shell}})'
alias {{.prefix}}p='eval $(gardenctl provider-env {{.shell}})'
alias {{.prefix}}cv='gardenctl config view -o yaml'
{{end}}

{{define "fish" -}}
if [ -z "$GCTL_SESSION_ID" ] && [ -z "$TERM_SESSION_ID" ];
  set -gx GCTL_SESSION_ID (uuidgen)
end
{{if not .noCompletion -}}
gardenctl completion {{.shell}} | source
alias {{.prefix}}=gardenctl
complete -c {{.prefix}} -w gardenctl
{{end -}}
alias {{.prefix}}tv='gardenctl target view -o yaml'
alias {{.prefix}}tc='gardenctl target control-plane'
alias {{.prefix}}tc-='gardenctl target unset control-plane'
alias {{.prefix}}k='eval (gardenctl kubectl-env {{.shell}})'
alias {{.prefix}}p='eval (gardenctl provider-env {{.shell}})'
alias {{.prefix}}cv='gardenctl config view -o yaml'
{{end}}

{{define "powershell" -}}
if ( !(Test-Path Env:GCTL_SESSION_ID) -and !(Test-Path Env:TERM_SESSION_ID) ) {
  $Env:GCTL_SESSION_ID = [guid]::NewGuid().ToString()
}
Set-Alias -Name {{.prefix}} -Value (get-command gardenctl).Path -Option AllScope -Force
{{if not .noCompletion -}}
function Gardenctl-Completion-Powershell {
  $s = (gardenctl completion {{.shell}})
  @(
    ($s -replace "(?ms)^Register-ArgumentCompleter -CommandName 'gardenctl' -ScriptBlock", "`$scriptBlock =")
    "Register-ArgumentCompleter -CommandName 'gardenctl' -ScriptBlock `$scriptBlock"
    "Register-ArgumentCompleter -CommandName '{{.prefix}}' -ScriptBlock `$scriptBlock"
  )
}
Gardenctl-Completion-Powershell | Out-String | Invoke-Expression
{{end -}}
function Gardenctl-Target-View {
  gardenctl target view -o yaml
}
Set-Alias -Name {{.prefix}}tv -Value Gardenctl-Target-View -Option AllScope -Force
function Gardenctl-Target-ControlPlane {
  gardenctl target control-plane
}
Set-Alias -Name {{.prefix}}tc -Value Gardenctl-Target-ControlPlane -Option AllScope -Force
function Gardenctl-Target-Unset-ControlPlane {
  gardenctl target unset control-plane
}
Set-Alias -Name {{.prefix}}tc- -Value Gardenctl-Target-Unset-ControlPlane -Option AllScope -Force
function Gardenctl-KubectlEnv {
  gardenctl kubectl-env {{.shell}} | Out-String | Invoke-Expression
}
Set-Alias -Name {{.prefix}}k -Value Gardenctl-KubectlEnv -Option AllScope -Force
function Gardenctl-ProviderEnv {
  gardenctl provider-env {{.shell}} | Out-String | Invoke-Expression
}
Set-Alias -Name {{.prefix}}p -Value Gardenctl-ProviderEnv -Option AllScope -Force
function Gardenctl-Config-View {
  gardenctl config view -o yaml
}
Set-Alias -Name {{.prefix}}cv -Value Gardenctl-Config-View -Option AllScope -Force
{{end}}
