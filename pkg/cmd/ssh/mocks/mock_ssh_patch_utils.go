// Code generated by MockGen. DO NOT EDIT.
// Source: ./ssh_patch_utils.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	target "github.com/gardener/gardenctl-v2/pkg/target"
	v1alpha1 "github.com/gardener/gardener/pkg/apis/operations/v1alpha1"
	gomock "github.com/golang/mock/gomock"
	clientcmd "k8s.io/client-go/tools/clientcmd"
	api "k8s.io/client-go/tools/clientcmd/api"
	client "sigs.k8s.io/controller-runtime/pkg/client"
	
	gardenclient "github.com/gardener/gardenctl-v2/internal/gardenclient"
)

// MocksshPatchUtils is a mock of sshPatchUtils interface.
type MocksshPatchUtils struct {
	ctrl     *gomock.Controller
	recorder *MocksshPatchUtilsMockRecorder
}

// MocksshPatchUtilsMockRecorder is the mock recorder for MocksshPatchUtils.
type MocksshPatchUtilsMockRecorder struct {
	mock *MocksshPatchUtils
}

// NewMocksshPatchUtils creates a new mock instance.
func NewMocksshPatchUtils(ctrl *gomock.Controller) *MocksshPatchUtils {
	mock := &MocksshPatchUtils{ctrl: ctrl}
	mock.recorder = &MocksshPatchUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksshPatchUtils) EXPECT() *MocksshPatchUtilsMockRecorder {
	return m.recorder
}

// GetAuthInfo mocks base method.
func (m *MocksshPatchUtils) GetAuthInfo(clientConfig clientcmd.ClientConfig) (*api.AuthInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthInfo", clientConfig)
	ret0, _ := ret[0].(*api.AuthInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthInfo indicates an expected call of GetAuthInfo.
func (mr *MocksshPatchUtilsMockRecorder) GetAuthInfo(clientConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthInfo", reflect.TypeOf((*MocksshPatchUtils)(nil).GetAuthInfo), clientConfig)
}

// GetBastionsOfUser mocks base method.
func (m *MocksshPatchUtils) GetBastionsOfUser(ctx context.Context, user string, gardenClient gardenclient.Client, bastionListOption client.ListOption) ([]v1alpha1.Bastion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBastionsOfUser", ctx, user, gardenClient, bastionListOption)
	ret0, _ := ret[0].([]v1alpha1.Bastion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBastionsOfUser indicates an expected call of GetBastionsOfUser.
func (mr *MocksshPatchUtilsMockRecorder) GetBastionsOfUser(ctx, user, gardenClient, bastionListOption interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBastionsOfUser", reflect.TypeOf((*MocksshPatchUtils)(nil).GetBastionsOfUser), ctx, user, gardenClient, bastionListOption)
}

// GetCurrentUser mocks base method.
func (m *MocksshPatchUtils) GetCurrentUser(ctx context.Context, gardenClient gardenclient.Client, authInfo *api.AuthInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUser", ctx, gardenClient, authInfo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentUser indicates an expected call of GetCurrentUser.
func (mr *MocksshPatchUtilsMockRecorder) GetCurrentUser(ctx, gardenClient, authInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUser", reflect.TypeOf((*MocksshPatchUtils)(nil).GetCurrentUser), ctx, gardenClient, authInfo)
}

// TargetAsListOption mocks base method.
func (m *MocksshPatchUtils) TargetAsListOption(target target.Target) client.ListOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TargetAsListOption", target)
	ret0, _ := ret[0].(client.ListOption)
	return ret0
}

// TargetAsListOption indicates an expected call of TargetAsListOption.
func (mr *MocksshPatchUtilsMockRecorder) TargetAsListOption(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetAsListOption", reflect.TypeOf((*MocksshPatchUtils)(nil).TargetAsListOption), target)
}
